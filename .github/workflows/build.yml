name: Build and Release

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-frontend:
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-latest, windows-latest]

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend-app/package-lock.json

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf \
            libsoup-2.4-dev libjavascriptcoregtk-4.0-dev libglib2.0-dev libcairo2-dev libpango1.0-dev \
            libgstreamer1.0-dev libgstreamer-plugins-base1.0-dev libgstreamer-gl1.0-dev \
            libgstreamer-plugins-bad1.0-dev libgstreamer-plugins-good1.0-dev

      - name: Install WiX Toolset (Windows only)
        if: matrix.platform == 'windows-latest'
        shell: powershell
        run: |
          Write-Host "Installing WiX Toolset..."
          choco install wix --yes --no-progress
          refreshenv

      - name: Install frontend dependencies
        working-directory: frontend-app
        run: npm install

      - name: Run frontend tests
        working-directory: frontend-app
        run: npm run test --if-present

      - name: Build the frontend app (Linux/macOS)
        if: matrix.platform != 'windows-latest'
        working-directory: frontend-app
        run: |
          echo "=== Building frontend first ==="
          npm run build
          echo "=== Checking dist directory ==="
          ls -la dist/
          echo "=== Running Tauri build ==="
          npm run tauri build

      - name: Build the frontend app (Windows)
        if: matrix.platform == 'windows-latest'
        working-directory: frontend-app
        shell: powershell
        run: |
          Write-Host "Building Tauri app for Windows..."
          Write-Host "Current directory: $(Get-Location)"
          Write-Host "Checking if src-tauri exists: $(Test-Path 'src-tauri')"
          if (Test-Path 'src-tauri') {
            Write-Host "src-tauri directory contents:"
            Get-ChildItem 'src-tauri' | ForEach-Object { Write-Host "  $($_.Name)" }
          }
          
          Write-Host "=== Building frontend first ==="
          Write-Host "Running npm run build..."
          $frontendBuild = npm run build 2>&1
          Write-Host "Frontend build output:"
          Write-Host $frontendBuild
          Write-Host "Frontend build exit code: $LASTEXITCODE"
          
          if ($LASTEXITCODE -ne 0) {
            Write-Host "Frontend build failed, cannot continue with Tauri build"
            exit 1
          }
          
          Write-Host "Frontend build successful, checking dist directory..."
          if (Test-Path "dist") {
            Write-Host "Dist directory exists with files:"
            Get-ChildItem "dist" -Recurse | ForEach-Object { Write-Host "  $($_.FullName)" }
          } else {
            Write-Host "ERROR: Dist directory not found after build!"
            exit 1
          }
          
          Write-Host "=== Running Tauri build ==="
          Write-Host "Running npm run tauri build..."
          
          # Run tauri build with proper output capture
          $buildOutput = ""
          $buildError = ""
          
          # Capture both stdout and stderr
          $process = Start-Process -FilePath "npm" -ArgumentList "run", "tauri", "build", "--", "--target", "x86_64-pc-windows-msvc", "--bundles", "msi" -WorkingDirectory (Get-Location) -NoNewWindow -PassThru -RedirectStandardOutput "build_output.txt" -RedirectStandardError "build_error.txt" -Wait
          
          Write-Host "Build exit code: $($process.ExitCode)"
          
          if (Test-Path "build_output.txt") {
            $buildOutput = Get-Content "build_output.txt" -Raw
            Write-Host "Build output:"
            Write-Host $buildOutput
            Remove-Item "build_output.txt" -Force
          }
          
          if (Test-Path "build_error.txt") {
            $buildError = Get-Content "build_error.txt" -Raw
            Write-Host "Build errors:"
            Write-Host $buildError
            Remove-Item "build_error.txt" -Force
          }
          
          if ($process.ExitCode -ne 0) {
            Write-Host "Primary build failed, trying without bundle specification..."
            
            # Try without bundle specification
            $process2 = Start-Process -FilePath "npm" -ArgumentList "run", "tauri", "build", "--", "--target", "x86_64-pc-windows-msvc" -WorkingDirectory (Get-Location) -NoNewWindow -PassThru -RedirectStandardOutput "build_output2.txt" -RedirectStandardError "build_error2.txt" -Wait
            
            Write-Host "Alternative build exit code: $($process2.ExitCode)"
            
            if (Test-Path "build_output2.txt") {
              $buildOutput2 = Get-Content "build_output2.txt" -Raw
              Write-Host "Alternative build output:"
              Write-Host $buildOutput2
              Remove-Item "build_output2.txt" -Force
            }
            
            if (Test-Path "build_error2.txt") {
              $buildError2 = Get-Content "build_error2.txt" -Raw
              Write-Host "Alternative build errors:"
              Write-Host $buildError2
              Remove-Item "build_error2.txt" -Force
            }
            
            if ($process2.ExitCode -ne 0) {
              Write-Host "Both build attempts failed"
              exit 1
            }
          }
          
          Write-Host "Checking what was created..."
          if (Test-Path "src-tauri\target") {
            Write-Host "Target directory exists. Contents:"
            Get-ChildItem "src-tauri\target" -Recurse | Where-Object { $_.Name -like "*exe" -or $_.Name -like "*msi" } | ForEach-Object { Write-Host "Found: $($_.FullName)" }
          } else {
            Write-Host "ERROR: src-tauri\target directory does not exist!"
          }

      - name: List build artifacts (Linux/macOS)
        if: matrix.platform != 'windows-latest'
        working-directory: frontend-app
        run: |
          echo "=== Checking bundle directory ==="
          ls -la src-tauri/target/release/bundle/ || echo "Bundle directory not found"
          echo "=== Checking target directory ==="
          ls -la src-tauri/target/release/ || echo "Release directory not found"
          echo "=== Checking target directory structure ==="
          find src-tauri/target -name "*.app" -o -name "*.dmg" -o -name "*.msi" -o -name "*.deb" 2>/dev/null || echo "No app files found"

      - name: List build artifacts (Windows)
        if: matrix.platform == 'windows-latest'
        working-directory: frontend-app
        shell: powershell
        run: |
          Write-Host "=== Checking bundle directory ==="
          if (Test-Path "src-tauri\target\release\bundle\") {
            Get-ChildItem "src-tauri\target\release\bundle\" -Recurse
          } else {
            Write-Host "Bundle directory not found"
          }
          Write-Host "=== Checking target directory ==="
          if (Test-Path "src-tauri\target\release\") {
            Get-ChildItem "src-tauri\target\release\"
          } else {
            Write-Host "Release directory not found"
          }
          Write-Host "=== Checking entire target directory structure ==="
          if (Test-Path "src-tauri\target\") {
            Get-ChildItem "src-tauri\target\" -Recurse -Name | Where-Object { $_ -like "*exe" -or $_ -like "*msi" -or $_ -like "*bundle*" } | ForEach-Object { Write-Host "Found: $_" }
          } else {
            Write-Host "Target directory not found"
          }
          Write-Host "=== Creating bundle directory manually if needed ==="
          if (-not (Test-Path "src-tauri\target\release\bundle\")) {
            Write-Host "Creating bundle directory structure..."
            New-Item -ItemType Directory -Path "src-tauri\target\release\bundle\" -Force | Out-Null
            Write-Host "Bundle directory created"
          }
          Write-Host "=== Copying exe to bundle directory if bundle not found ==="
          $exeFiles = Get-ChildItem "src-tauri\target\release\" -Filter "*.exe" -ErrorAction SilentlyContinue
          $targetExeFiles = Get-ChildItem "src-tauri\target\x86_64-pc-windows-msvc\release\" -Filter "*.exe" -ErrorAction SilentlyContinue
          
          if ($exeFiles) {
            foreach ($exe in $exeFiles) {
              Write-Host "Found exe in release: $($exe.Name)"
              Copy-Item $exe.FullName "src-tauri\target\release\bundle\" -Force
              Write-Host "Copied $($exe.Name) to bundle directory"
            }
          } elseif ($targetExeFiles) {
            foreach ($exe in $targetExeFiles) {
              Write-Host "Found exe in target: $($exe.Name)"
              Copy-Item $exe.FullName "src-tauri\target\release\bundle\" -Force
              Write-Host "Copied $($exe.Name) to bundle directory"
            }
          } else {
            Write-Host "No exe files found in release or target directories"
          }
          
          Write-Host "=== Final verification of upload paths ==="
          $bundleFiles = Get-ChildItem "src-tauri\target\release\bundle\" -ErrorAction SilentlyContinue
          $releaseFiles = Get-ChildItem "src-tauri\target\release\" -Filter "*.exe" -ErrorAction SilentlyContinue
          Write-Host "Bundle directory files: $($bundleFiles.Count)"
          Write-Host "Release directory exe files: $($releaseFiles.Count)"
          
          if ($bundleFiles.Count -eq 0 -and $releaseFiles.Count -gt 0) {
            Write-Host "Creating fallback structure for upload..."
            $fallbackDir = "src-tauri\target\release\artifacts"
            New-Item -ItemType Directory -Path $fallbackDir -Force | Out-Null
            foreach ($exe in $releaseFiles) {
              Copy-Item $exe.FullName $fallbackDir -Force
              Write-Host "Created fallback: $($exe.Name)"
            }
          } elseif ($bundleFiles.Count -eq 0 -and $releaseFiles.Count -eq 0) {
            Write-Host "CRITICAL: No build artifacts found! Creating emergency fallback..."
            $emergencyDir = "src-tauri\target\release\emergency"
            New-Item -ItemType Directory -Path $emergencyDir -Force | Out-Null
            "Windows build failed - no artifacts generated" | Out-File -FilePath "$emergencyDir\build-status.txt" -Encoding UTF8
            Write-Host "Created emergency fallback file"
          }

      - name: Upload frontend artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build-${{ matrix.platform }}
          path: |
            frontend-app/src-tauri/target/release/bundle/
            frontend-app/src-tauri/target/release/artifacts/
            frontend-app/src-tauri/target/release/emergency/
            frontend-app/src-tauri/target/x86_64-pc-windows-msvc/release/*.exe
            frontend-app/src-tauri/target/release/*.exe
            frontend-app/src-tauri/target/release/*.msi
            frontend-app/src-tauri/target/release/*.dmg
            frontend-app/src-tauri/target/release/*.deb
            frontend-app/src-tauri/target/release/*.AppImage
          if-no-files-found: warn

  build-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Build backend
        working-directory: backend-app/backend-api
        run: |
          cargo build --release
          cargo test

      - name: Upload backend binary
        uses: actions/upload-artifact@v4
        with:
          name: backend-binary
          path: backend-app/backend-api/target/release/crm-backend-api

  build-python-sidecar:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install Python dependencies
        working-directory: backend-app/sidecar-python
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Test Python sidecar
        working-directory: backend-app/sidecar-python
        run: |
          python -m pytest tests/ || echo "No tests found"

      - name: Upload Python sidecar
        uses: actions/upload-artifact@v4
        with:
          name: python-sidecar
          path: backend-app/sidecar-python/

