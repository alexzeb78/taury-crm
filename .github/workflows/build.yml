name: Build and Release

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

jobs:
  build-frontend:
    strategy:
      fail-fast: false
      matrix:
        platform: [macos-latest, ubuntu-latest, windows-latest]

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend-app/package-lock.json

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Install WiX Toolset (Windows only)
        if: matrix.platform == 'windows-latest'
        shell: powershell
        run: |
          Write-Host "Installing WiX Toolset..."
          choco install wix --yes --no-progress
          refreshenv

      - name: Install frontend dependencies
        working-directory: frontend-app
        run: npm install

      - name: Run frontend tests
        working-directory: frontend-app
        run: npm run test --if-present

      - name: Build the frontend app (Linux/macOS)
        if: matrix.platform != 'windows-latest'
        working-directory: frontend-app
        run: npm run tauri build

      - name: Build the frontend app (Windows)
        if: matrix.platform == 'windows-latest'
        working-directory: frontend-app
        shell: powershell
        run: |
          Write-Host "Building Tauri app for Windows..."
          npm run tauri build -- --target x86_64-pc-windows-msvc --bundles msi

      - name: List build artifacts (Linux/macOS)
        if: matrix.platform != 'windows-latest'
        working-directory: frontend-app
        run: |
          echo "=== Checking bundle directory ==="
          ls -la src-tauri/target/release/bundle/ || echo "Bundle directory not found"
          echo "=== Checking target directory ==="
          ls -la src-tauri/target/release/ || echo "Release directory not found"
          echo "=== Checking target directory structure ==="
          find src-tauri/target -name "*.app" -o -name "*.dmg" -o -name "*.msi" -o -name "*.deb" 2>/dev/null || echo "No app files found"

      - name: List build artifacts (Windows)
        if: matrix.platform == 'windows-latest'
        working-directory: frontend-app
        shell: powershell
        run: |
          Write-Host "=== Checking bundle directory ==="
          if (Test-Path "src-tauri\target\release\bundle\") {
            Get-ChildItem "src-tauri\target\release\bundle\" -Recurse
          } else {
            Write-Host "Bundle directory not found"
          }
          Write-Host "=== Checking target directory ==="
          if (Test-Path "src-tauri\target\release\") {
            Get-ChildItem "src-tauri\target\release\"
          } else {
            Write-Host "Release directory not found"
          }
          Write-Host "=== Checking entire target directory structure ==="
          if (Test-Path "src-tauri\target\") {
            Get-ChildItem "src-tauri\target\" -Recurse -Name | Where-Object { $_ -like "*exe" -or $_ -like "*msi" -or $_ -like "*bundle*" } | ForEach-Object { Write-Host "Found: $_" }
          } else {
            Write-Host "Target directory not found"
          }
          Write-Host "=== Creating bundle directory manually if needed ==="
          if (-not (Test-Path "src-tauri\target\release\bundle\")) {
            Write-Host "Creating bundle directory structure..."
            New-Item -ItemType Directory -Path "src-tauri\target\release\bundle\" -Force | Out-Null
            Write-Host "Bundle directory created"
          }
          Write-Host "=== Copying exe to bundle directory if bundle not found ==="
          $exeFiles = Get-ChildItem "src-tauri\target\release\" -Filter "*.exe" -ErrorAction SilentlyContinue
          if ($exeFiles) {
            foreach ($exe in $exeFiles) {
              Write-Host "Found exe: $($exe.Name)"
              Copy-Item $exe.FullName "src-tauri\target\release\bundle\" -Force
              Write-Host "Copied $($exe.Name) to bundle directory"
            }
          } else {
            Write-Host "No exe files found in release directory"
          }

      - name: Upload frontend artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build-${{ matrix.platform }}
          path: |
            frontend-app/src-tauri/target/release/bundle/
            frontend-app/src-tauri/target/release/*.exe
            frontend-app/src-tauri/target/release/*.msi
            frontend-app/src-tauri/target/release/*.dmg
            frontend-app/src-tauri/target/release/*.deb
            frontend-app/src-tauri/target/release/*.AppImage
          if-no-files-found: warn

  build-backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Build backend
        working-directory: backend-app/backend-api
        run: |
          cargo build --release
          cargo test

      - name: Upload backend binary
        uses: actions/upload-artifact@v4
        with:
          name: backend-binary
          path: backend-app/backend-api/target/release/crm-backend-api

  build-python-sidecar:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install Python dependencies
        working-directory: backend-app/sidecar-python
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Test Python sidecar
        working-directory: backend-app/sidecar-python
        run: |
          python -m pytest tests/ || echo "No tests found"

      - name: Upload Python sidecar
        uses: actions/upload-artifact@v4
        with:
          name: python-sidecar
          path: backend-app/sidecar-python/

